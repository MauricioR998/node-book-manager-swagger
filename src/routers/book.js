const express = require("express");
const Book = require("../models/book");
const router = new express.Router();
/**
 * @swagger
 * components:
 *  schemas:
 *    Book:
 *      type: object
 *      required:
 *        - title
 *        - author
 *      properties:
 *        _id:
 *          type: string
 *          description: The ObjectID auto-generated by MongoDB
 *        title:
 *          type: string
 *          description: The book title
 *        author:
 *          type: string
 *          description: The book author
 *      example:
 *        _id: 60c3efecf56a461e38cb3c0d
 *        title: The New Turing Omnibus Book
 *        author: Alexander K. Dewdney
 */

/**
 * @swagger
 * tags:
 *  name: Books
 *  description: The books managing API
 */

/**
 * @swagger
 * /books:
 *    get:
 *      summary: Returns the list of all the books
 *      tags: [Books]
 *      responses:
 *        200:
 *          description: The list of the books
 *          content:
 *           application/json:
 *            schema:
 *              type: array
 *              items:
 *                $ref: '#/components/schemas/Book'
 *
 */

router.get("/", async (req, res) => {
  try {
    const books = await Book.find({});
    res.send(books);
  } catch (error) {
    res.status(500).send();
  }
});

/**
 * @swagger
 *  paths:
 *    /books/{id}:
 *      parameters:
 *        - in: path
 *          name: id
 *          type: string
 *          required: true
 *          description: The book id
 */

/**
 * @swagger
 * /books/{id}:
 *   get:
 *      summary: Get the book by id
 *      tags: [Books]
 *      responses:
 *        200:
 *          description: The book description by id
 *          content:
 *            application/json:
 *              schema:
 *                $ref: '#/components/schemas/Book'
 *        404:
 *          description: The book was not found
 */

router.get("/:id", async (req, res) => {
  const id = req.params.id;
  try {
    const book = await Book.findById(id);
    if (!book) {
      res.sendStatus(404);
    }
    res.send(book);
  } catch (error) {
    res.status(500).send();
  }
});

/**
 * @swagger
 * /books:
 *  post:
 *    summary: Create a new book
 *    tags: [Books]
 *    requestBody:
 *      required: true
 *      content:
 *        application/json:
 *          schema:
 *            $ref: '#/components/schemas/Book'
 *    responses:
 *      200:
 *        description: The book was successfully created
 *        content:
 *          application/json:
 *            schema:
 *              $ref: '#/components/schemas/Book'
 *      500:
 *        description: Some server error
 *
 */

router.post("/", async (req, res) => {
  const book = new Book({
    ...req.body,
  });
  try {
    await book.save();
    res.status(201).send(book);
  } catch (error) {
    res.status(400).send();
  }
});

/**
 * @swagger
 * /books/{id}:
 *  put:
 *    summary: Update the book by the id
 *    tags: [Books]
 *    requestBody:
 *      required: true
 *      content:
 *        application/json:
 *          schema:
 *            $ref: '#/components/schemas/Book'
 *    responses:
 *      200:
 *        description: The book was updated
 *        content:
 *          application/json:
 *            schema:
 *              $ref: '#/components/schemas/Book'
 *      404:
 *        description: The book was not found
 *      500:
 *        description: Some error happened
 *
 */

router.put("/:id", async (req, res) => {
  const id = req.params.id;
  try {
    const book = await Book.findByIdAndUpdate(id, { ...req.body });
    if (!book) {
      res.status(404).send();
    }
    await book.save();
    res.status(200).send();
  } catch (error) {
    res.status(400).send();
  }
});

/**
 * @swagger
 * /books/{id}:
 *   delete:
 *      summary: Remove the book by id
 *      tags: [Books]
 *      responses:
 *        200:
 *          description: The book was deleted
 *        404:
 *          description: The book was not found
 */

router.delete("/:id", async (req, res) => {
  const id = req.params.id;

  try {
    const book = await Book.findByIdAndDelete(id);
    if (!book) {
      res.status(404).send();
    }
    res.send(book);
  } catch (error) {
    res.status(500).send();
  }
});

module.exports = router;
